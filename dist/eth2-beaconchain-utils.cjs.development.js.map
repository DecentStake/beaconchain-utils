{"version":3,"file":"eth2-beaconchain-utils.cjs.development.js","sources":["../src/classes/DepositData.ts","../src/DeriveValidator.ts","../src/constants/chain-configs.ts","../src/utils/signing.ts","../src/utils/utils.ts","../src/SignDepositData.ts","../src/classes/ValidatorSigner.ts","../src/GenerateDepositData.ts","../src/GenerateKeystores.ts"],"sourcesContent":["import type { NetworkName } from '../interfaces';\n\nexport class DepositData {\n\tpubkey: string;\n\n\twithdrawal_credentials: string;\n\n\tamount: number;\n\n\tsignature: string;\n\n\tdeposit_message_root: string;\n\n\tdeposit_data_root: string;\n\n\tfork_version: string;\n\n\tnetwork_name: NetworkName;\n\n\tconstructor(data: {\n\t\tpubkey: string;\n\t\twithdrawal_credentials: string;\n\t\tamount: number;\n\t\tsignature: string;\n\t\tdeposit_message_root: string;\n\t\tdeposit_data_root: string;\n\t\tfork_version: string;\n\t\tnetwork_name: NetworkName;\n\t}) {\n\t\tthis.pubkey = data.pubkey;\n\t\tthis.withdrawal_credentials = data.withdrawal_credentials;\n\t\tthis.amount = data.amount;\n\t\tthis.signature = data.signature;\n\t\tthis.deposit_message_root = data.deposit_message_root;\n\t\tthis.deposit_data_root = data.deposit_data_root;\n\t\tthis.fork_version = data.fork_version;\n\t\tthis.network_name = data.network_name;\n\t}\n}\n\nexport class PackedDepositData {\n\tpubkeys: string;\n\n\twithdrawal_credential: string;\n\n\tsignatures: string;\n\n\tdeposit_data_roots: string[];\n\n\tconstructor(data: {\n\t\tpubkeys: string;\n\t\twithdrawal_credential: string;\n\t\tsignatures: string;\n\t\tdeposit_data_roots: string[];\n\t}) {\n\t\tthis.pubkeys = data.pubkeys;\n\t\tthis.withdrawal_credential = data.withdrawal_credential;\n\t\tthis.signatures = data.signatures;\n\t\tthis.deposit_data_roots = data.deposit_data_roots;\n\t}\n}\n","import { deriveEth2ValidatorKeys } from '@chainsafe/bls-keygen';\nimport { SecretKey } from '@chainsafe/blst';\n\nimport type { IValidator } from './interfaces';\n\n/**\n * Derive a validator's secret key and public key from a master secret key and validator index.\n * @param {Uint8Array} masterSecretKey The master secret key.\n * @param {number} validatorIndex The validator index.\n * @returns {Validator} The validator's secret key and public key as an object.\n */\nexport function DeriveValidator(masterSecretKey: Uint8Array, validatorIndex: number): IValidator {\n\tconst secretKey = SecretKey.fromBytes(\n\t\tderiveEth2ValidatorKeys(masterSecretKey, validatorIndex).signing,\n\t);\n\tconst pubkey = secretKey.toPublicKey().toBytes();\n\n\treturn { pubkey, secretKey };\n}\n","import { fromHexString as b } from '@chainsafe/ssz';\n\nexport const CHAIN_CONFIGS = {\n\tmainnet: {\n\t\tGENESIS_FORK_VERSION: b('00000000'),\n\t\tGENESIS_VALIDATORS_ROOT: b('4b363db94e286120d76eb905340fdd4e54bfe9f06bf33ff6cf5ad27f511bfe95'),\n\t},\n\tgoerli: {\n\t\tGENESIS_FORK_VERSION: b('00001020'),\n\t\tGENESIS_VALIDATORS_ROOT: b('043db0d9a83813551ee2f33450d23797757d430911a9320530ad8a0eabc43efb'),\n\t},\n};\n","export const getDepositMessage = (pubkey: Uint8Array, withdrawal_credential: Uint8Array) => ({\n\tpubkey,\n\twithdrawalCredentials: withdrawal_credential,\n\tamount: 32e9,\n});\n","import { fromHexString as b } from '@chainsafe/ssz';\n\n/**\n * Utility function to append two Uint8Arrays.\n * @param array1 The first Uint8Array.\n * @param array2 The second Uint8Array.\n * @returns The concatenated Uint8Array.\n */\nexport const appendUint8Arrays = (array1: Uint8Array, array2: Uint8Array) => {\n\tconst tmp = new Uint8Array(array1.length + array2.length);\n\ttmp.set(array1, 0);\n\ttmp.set(array2, array1.length);\n\n\treturn tmp;\n};\n\n/**\n * Parse an Ethereum address to a BLS execution layer withdrawal credential.\n * @param {string} address The Ethereum address to parse.\n * @returns {Uint8Array} The BLS execution layer withdrawal credential as a Uint8Array.\n */\nexport const parseAddressToBLS = (address: string): Uint8Array =>\n\tb(`0x010000000000000000000000${address.replace('0x', '')}`);\n\n// eslint-disable-next-line @typescript-eslint/no-implied-eval, no-new-func\nexport const importDynamic = new Function('modulePath', 'return import(modulePath)');\n","import type { SecretKey } from '@chainsafe/blst';\n\nimport { CHAIN_CONFIGS } from './constants';\nimport type { IDepositDataSignature, NetworkName } from './interfaces';\nimport { importDynamic } from './utils';\nimport { getDepositMessage } from './utils/signing';\n\n/**\n * Signs a deposit data object.\n * @param {Uint8Array} pubkey The validator's public key.\n * @param {Uint8Array} withdrawal_credential The validator's withdrawal credential.\n * @param {SecretKey} secretKey The validator's secret key.\n * @returns {DepositDataSignature} The signature and deposit data root as an object.\n */\nexport async function SignDepositData(\n\tpubkey: Uint8Array,\n\twithdrawal_credential: Uint8Array,\n\tsecretKey: SecretKey,\n\tnetwork: NetworkName = 'mainnet',\n): Promise<IDepositDataSignature> {\n\tconst { config } = await importDynamic('@lodestar/config/default');\n\tconst { DOMAIN_DEPOSIT } = await importDynamic('@lodestar/params');\n\tconst { ZERO_HASH, computeDomain, computeSigningRoot } = await importDynamic(\n\t\t'@lodestar/state-transition',\n\t);\n\tconst { ssz } = await importDynamic('@lodestar/types');\n\n\tconst depositMessage = getDepositMessage(pubkey, withdrawal_credential);\n\tconst depositMessageRoot = ssz.phase0.DepositMessage.hashTreeRoot(depositMessage);\n\n\tconst domain = computeDomain(\n\t\tDOMAIN_DEPOSIT,\n\t\tCHAIN_CONFIGS[network].GENESIS_FORK_VERSION,\n\t\tZERO_HASH,\n\t);\n\n\tconst signingRoot: Uint8Array = computeSigningRoot(\n\t\tssz.phase0.DepositMessage,\n\t\tdepositMessage,\n\t\tdomain,\n\t);\n\n\tconst depositData = {\n\t\t...depositMessage,\n\t\tsignature: secretKey.sign(signingRoot).toBytes(),\n\t};\n\tconst depositDataRoot = ssz.phase0.DepositData.hashTreeRoot(depositData);\n\n\treturn {\n\t\tsignature: depositData.signature,\n\t\tdeposit_data_root: depositDataRoot,\n\t\tdeposit_message_root: depositMessageRoot,\n\t\tfork_version: config.GENESIS_FORK_VERSION,\n\t} as IDepositDataSignature;\n}\n","import type { SecretKey } from '@chainsafe/blst';\n\nimport { DeriveValidator } from '../DeriveValidator';\nimport type { IDepositDataSignature, NetworkName } from '../interfaces';\nimport { SignDepositData } from '../SignDepositData';\n\nexport class ValidatorSigner {\n\treadonly pubkey: Uint8Array;\n\n\treadonly network: NetworkName;\n\n\tprivate readonly secretKey: SecretKey;\n\n\tprivate readonly validatorIndex: number;\n\n\tconstructor(\n\t\tmasterSecretKey: Uint8Array,\n\t\tvalidatorIndex: number,\n\t\tnetwork: NetworkName = 'mainnet',\n\t) {\n\t\tconst { secretKey, pubkey } = DeriveValidator(masterSecretKey, validatorIndex);\n\t\tthis.pubkey = pubkey;\n\t\tthis.secretKey = secretKey;\n\t\tthis.validatorIndex = validatorIndex;\n\t\tthis.network = network;\n\t}\n\n\tget ValidatorIndex(): number {\n\t\treturn this.validatorIndex;\n\t}\n\n\tasync SignDepositData(withdrawal_credential: Uint8Array): Promise<IDepositDataSignature> {\n\t\treturn SignDepositData(this.pubkey, withdrawal_credential, this.secretKey, this.network);\n\t}\n}\n","import { deriveKeyFromMnemonic } from '@chainsafe/bls-keygen';\nimport { toHexString } from '@chainsafe/ssz';\n\nimport { DeriveValidator } from './DeriveValidator';\nimport type { IDepositData, IPackedDepositData, NetworkName } from './interfaces';\nimport { SignDepositData } from './SignDepositData';\nimport { appendUint8Arrays, parseAddressToBLS } from './utils';\n\n/**\n * Generates a packed deposit data for a given set of validator indexes, a given seed phrase, and a given execution layer address.\n * @param {string} validatorMnemonic Seed phrase of the validator.\n * @param {string} depositor Execution layer address of the depositor.\n * @param {number[]} validatorIndexes Array of numbers representing the validator indexes to generate deposit data for.\n * @returns {PackedDepositData} An object containing the deposit data for the given validator indexes, ready for use in the BatchDeposit contract.\n * @notice We return DepositData as an object with string properties, rather than a Uint8Array, for ease of use in back-front communication.\n */\nexport async function generatePackedDepositData(\n\tvalidatorMnemonic: string,\n\tdepositor: string,\n\tvalidatorIndexes: number[],\n): Promise<IPackedDepositData> {\n\tconst withdrawalCredential = parseAddressToBLS(depositor);\n\tconst masterSecretKey: Uint8Array = deriveKeyFromMnemonic(validatorMnemonic);\n\n\tlet packedPubkeys = new Uint8Array();\n\tlet packedSignatures = new Uint8Array();\n\tconst depositDataRoots: string[] = [];\n\n\tfor (const validatorIndex of validatorIndexes) {\n\t\tconst { pubkey, secretKey } = DeriveValidator(masterSecretKey, validatorIndex);\n\n\t\t/* eslint-disable no-await-in-loop */\n\t\tconst { signature, deposit_data_root: depositDataRoot } = await SignDepositData(\n\t\t\tpubkey,\n\t\t\twithdrawalCredential,\n\t\t\tsecretKey,\n\t\t);\n\n\t\tpackedPubkeys = appendUint8Arrays(packedPubkeys, pubkey);\n\t\tpackedSignatures = appendUint8Arrays(packedSignatures, signature);\n\t\tdepositDataRoots.push(toHexString(depositDataRoot));\n\t}\n\n\treturn {\n\t\tpubkeys: toHexString(packedPubkeys),\n\t\twithdrawal_credential: toHexString(withdrawalCredential),\n\t\tsignatures: toHexString(packedSignatures),\n\t\tdeposit_data_roots: depositDataRoots,\n\t} as IPackedDepositData;\n}\n\n/**\n * Generates deposit data for a given set of validator indexes, a given seed phrase, and a given execution layer address.\n * @param {string} validatorMnemonic Seed phrase of the validator.\n * @param {string} depositor Execution layer address of the depositor.\n * @param {number[]} validatorIndexes Array of numbers representing the validator indexes to generate deposit data for.\n * @param {NetworkNames} network Name of the network to generate deposit data for.\n * @returns {DepositData[]} An array of depositData objects, similar to what deposit_cli outputs.\n */\nexport async function generateDepositData(\n\tvalidatorMnemonic: string,\n\tdepositor: string,\n\tvalidatorIndexes: number[],\n\tnetwork: NetworkName = 'mainnet',\n): Promise<IDepositData[]> {\n\tconst withdrawalCredential = parseAddressToBLS(depositor);\n\tconst masterSecretKey = deriveKeyFromMnemonic(validatorMnemonic);\n\n\tconst depositDataPromises = validatorIndexes.map(async (validatorIndex) => {\n\t\tconst { pubkey, secretKey } = DeriveValidator(masterSecretKey, validatorIndex);\n\n\t\tconst {\n\t\t\tsignature,\n\t\t\tdeposit_data_root: depositDataRoot,\n\t\t\tdeposit_message_root: depositMessageRoot,\n\t\t\tfork_version: forkVersion,\n\t\t} = await SignDepositData(pubkey, withdrawalCredential, secretKey);\n\n\t\treturn {\n\t\t\tpubkey: toHexString(pubkey).slice(2),\n\t\t\twithdrawal_credentials: toHexString(withdrawalCredential).slice(2),\n\t\t\tamount: 32e9,\n\t\t\tsignature: toHexString(signature).slice(2),\n\t\t\tdeposit_message_root: toHexString(depositMessageRoot).slice(2),\n\t\t\tdeposit_data_root: toHexString(depositDataRoot).slice(2),\n\t\t\tfork_version: toHexString(forkVersion).slice(2),\n\t\t\tnetwork_name: network,\n\t\t} as IDepositData;\n\t});\n\n\treturn Promise.all(depositDataPromises);\n}\n","import { Keystore } from '@chainsafe/bls-keystore';\n\nimport { DeriveValidator } from './DeriveValidator';\nimport type { IKeystoreObject } from './interfaces';\n\n/**\n * Generates keystores for a range of validator indexes, given a master secret key and a password.\n * @param {Uint8Array} masterSecretKey The master secret key to derive the validator secret keys from.\n * @param {number} startIndex The index of the first validator to generate a keystore for.\n * @param {number} numberOfValidators The number of validators to generate keystores for. (starting from startIndex)\n * @param {string} password The password to encrypt the keystores with.\n * @returns {IKeystoreObject[]} An array of keystores for the given validator indexes.\n */\nexport async function GenerateKeystores(\n\tmasterSecretKey: Uint8Array,\n\tstartIndex: number,\n\tnumberOfValidators: number,\n\tpassword: string,\n): Promise<IKeystoreObject[]> {\n\tconst validatorIndexes = Array.from(\n\t\t{ length: numberOfValidators },\n\t\t(_, index) => startIndex + index,\n\t);\n\n\tconst keystorePromises = validatorIndexes.map(async (validatorIndex) => {\n\t\tconst { secretKey, pubkey } = DeriveValidator(masterSecretKey, validatorIndex);\n\n\t\treturn (await Keystore.create(\n\t\t\tpassword,\n\t\t\tsecretKey.toBytes(),\n\t\t\tpubkey,\n\t\t\t`m/12381/3600/${validatorIndex}/0/0`,\n\t\t)) as IKeystoreObject;\n\t});\n\n\treturn Promise.all(keystorePromises);\n}\n"],"names":["DepositData","data","pubkey","withdrawal_credentials","amount","signature","deposit_message_root","deposit_data_root","fork_version","network_name","PackedDepositData","pubkeys","withdrawal_credential","signatures","deposit_data_roots","DeriveValidator","masterSecretKey","validatorIndex","secretKey","SecretKey","fromBytes","deriveEth2ValidatorKeys","signing","toPublicKey","toBytes","CHAIN_CONFIGS","mainnet","GENESIS_FORK_VERSION","b","GENESIS_VALIDATORS_ROOT","goerli","getDepositMessage","withdrawalCredentials","appendUint8Arrays","array1","array2","tmp","Uint8Array","length","set","parseAddressToBLS","address","replace","importDynamic","Function","SignDepositData","_x","_x2","_x3","_x4","_SignDepositData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","network","_context","next","_yield$importDynamic","sent","config","_yield$importDynamic2","DOMAIN_DEPOSIT","_yield$importDynamic3","ZERO_HASH","computeDomain","computeSigningRoot","_yield$importDynamic4","ssz","depositMessage","depositMessageRoot","phase0","DepositMessage","hashTreeRoot","domain","signingRoot","depositData","_extends","sign","depositDataRoot","abrupt","stop","ValidatorSigner","_DeriveValidator","_proto","prototype","_SignDepositData2","wrap","_callee$","prev","_createClass","key","get","generatePackedDepositData","_generatePackedDepositData","validatorMnemonic","depositor","validatorIndexes","withdrawalCredential","packedPubkeys","packedSignatures","depositDataRoots","_iterator","_step","_yield$SignDepositDat","deriveKeyFromMnemonic","_createForOfIteratorHelperLoose","done","value","push","toHexString","generateDepositData","_x5","_x6","_x7","_generateDepositData","_callee3","depositDataPromises","map","_ref","_callee2","_DeriveValidator2","_yield$SignDepositDat2","forkVersion","_callee2$","_context2","slice","_x8","_context3","Promise","all","GenerateKeystores","_GenerateKeystores","startIndex","numberOfValidators","password","keystorePromises","Array","from","_","index","Keystore","create"],"mappings":"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"}