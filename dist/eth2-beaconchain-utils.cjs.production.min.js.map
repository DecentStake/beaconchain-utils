{"version":3,"file":"eth2-beaconchain-utils.cjs.production.min.js","sources":["../src/DeriveValidator.ts","../src/constants/chain-configs.ts","../src/utils/signing.ts","../src/utils/utils.ts","../src/SignDepositData.ts","../src/classes/DepositData.ts","../src/classes/ValidatorSigner.ts","../src/GenerateDepositData.ts","../src/GenerateKeystores.ts"],"sourcesContent":["import { deriveEth2ValidatorKeys } from '@chainsafe/bls-keygen';\nimport { SecretKey } from '@chainsafe/blst';\n\nimport type { IValidator } from './interfaces';\n\n/**\n * Derive a validator's secret key and public key from a master secret key and validator index.\n * @param {Uint8Array} masterSecretKey The master secret key.\n * @param {number} validatorIndex The validator index.\n * @returns {Validator} The validator's secret key and public key as an object.\n */\nexport function DeriveValidator(masterSecretKey: Uint8Array, validatorIndex: number): IValidator {\n\tconst secretKey = SecretKey.fromBytes(\n\t\tderiveEth2ValidatorKeys(masterSecretKey, validatorIndex).signing,\n\t);\n\tconst pubkey = secretKey.toPublicKey().toBytes();\n\n\treturn { pubkey, secretKey };\n}\n","import { fromHexString as b } from '@chainsafe/ssz';\n\nexport const CHAIN_CONFIGS = {\n\tmainnet: {\n\t\tGENESIS_FORK_VERSION: b('00000000'),\n\t\tGENESIS_VALIDATORS_ROOT: b('4b363db94e286120d76eb905340fdd4e54bfe9f06bf33ff6cf5ad27f511bfe95'),\n\t},\n\tgoerli: {\n\t\tGENESIS_FORK_VERSION: b('00001020'),\n\t\tGENESIS_VALIDATORS_ROOT: b('043db0d9a83813551ee2f33450d23797757d430911a9320530ad8a0eabc43efb'),\n\t},\n};\n","export const getDepositMessage = (pubkey: Uint8Array, withdrawal_credential: Uint8Array) => ({\n\tpubkey,\n\twithdrawalCredentials: withdrawal_credential,\n\tamount: 32e9,\n});\n","import { fromHexString as b } from '@chainsafe/ssz';\n\n/**\n * Utility function to append two Uint8Arrays.\n * @param array1 The first Uint8Array.\n * @param array2 The second Uint8Array.\n * @returns The concatenated Uint8Array.\n */\nexport const appendUint8Arrays = (array1: Uint8Array, array2: Uint8Array) => {\n\tconst tmp = new Uint8Array(array1.length + array2.length);\n\ttmp.set(array1, 0);\n\ttmp.set(array2, array1.length);\n\n\treturn tmp;\n};\n\n/**\n * Parse an Ethereum address to a BLS execution layer withdrawal credential.\n * @param {string} address The Ethereum address to parse.\n * @returns {Uint8Array} The BLS execution layer withdrawal credential as a Uint8Array.\n */\nexport const parseAddressToBLS = (address: string): Uint8Array =>\n\tb(`0x010000000000000000000000${address.replace('0x', '')}`);\n\n// eslint-disable-next-line @typescript-eslint/no-implied-eval, no-new-func\nexport const importDynamic = new Function('modulePath', 'return import(modulePath)');\n","import type { SecretKey } from '@chainsafe/blst';\n\nimport { CHAIN_CONFIGS } from './constants';\nimport type { IDepositDataSignature, NetworkName } from './interfaces';\nimport { importDynamic } from './utils';\nimport { getDepositMessage } from './utils/signing';\n\n/**\n * Signs a deposit data object.\n * @param {Uint8Array} pubkey The validator's public key.\n * @param {Uint8Array} withdrawal_credential The validator's withdrawal credential.\n * @param {SecretKey} secretKey The validator's secret key.\n * @returns {DepositDataSignature} The signature and deposit data root as an object.\n */\nexport async function SignDepositData(\n\tpubkey: Uint8Array,\n\twithdrawal_credential: Uint8Array,\n\tsecretKey: SecretKey,\n\tnetwork: NetworkName = 'mainnet',\n): Promise<IDepositDataSignature> {\n\tconst { config } = await importDynamic('@lodestar/config/default');\n\tconst { DOMAIN_DEPOSIT } = await importDynamic('@lodestar/params');\n\tconst { ZERO_HASH, computeDomain, computeSigningRoot } = await importDynamic(\n\t\t'@lodestar/state-transition',\n\t);\n\tconst { ssz } = await importDynamic('@lodestar/types');\n\n\tconst depositMessage = getDepositMessage(pubkey, withdrawal_credential);\n\tconst depositMessageRoot = ssz.phase0.DepositMessage.hashTreeRoot(depositMessage);\n\n\tconst domain = computeDomain(\n\t\tDOMAIN_DEPOSIT,\n\t\tCHAIN_CONFIGS[network].GENESIS_FORK_VERSION,\n\t\tZERO_HASH,\n\t);\n\n\tconst signingRoot: Uint8Array = computeSigningRoot(\n\t\tssz.phase0.DepositMessage,\n\t\tdepositMessage,\n\t\tdomain,\n\t);\n\n\tconst depositData = {\n\t\t...depositMessage,\n\t\tsignature: secretKey.sign(signingRoot).toBytes(),\n\t};\n\tconst depositDataRoot = ssz.phase0.DepositData.hashTreeRoot(depositData);\n\n\treturn {\n\t\tsignature: depositData.signature,\n\t\tdeposit_data_root: depositDataRoot,\n\t\tdeposit_message_root: depositMessageRoot,\n\t\tfork_version: config.GENESIS_FORK_VERSION,\n\t} as IDepositDataSignature;\n}\n","import type { NetworkName } from '../interfaces';\n\nexport class DepositData {\n\tpubkey: string;\n\n\twithdrawal_credentials: string;\n\n\tamount: number;\n\n\tsignature: string;\n\n\tdeposit_message_root: string;\n\n\tdeposit_data_root: string;\n\n\tfork_version: string;\n\n\tnetwork_name: NetworkName;\n\n\tconstructor(data: {\n\t\tpubkey: string;\n\t\twithdrawal_credentials: string;\n\t\tamount: number;\n\t\tsignature: string;\n\t\tdeposit_message_root: string;\n\t\tdeposit_data_root: string;\n\t\tfork_version: string;\n\t\tnetwork_name: NetworkName;\n\t}) {\n\t\tthis.pubkey = data.pubkey;\n\t\tthis.withdrawal_credentials = data.withdrawal_credentials;\n\t\tthis.amount = data.amount;\n\t\tthis.signature = data.signature;\n\t\tthis.deposit_message_root = data.deposit_message_root;\n\t\tthis.deposit_data_root = data.deposit_data_root;\n\t\tthis.fork_version = data.fork_version;\n\t\tthis.network_name = data.network_name;\n\t}\n}\n\nexport class PackedDepositData {\n\tpubkeys: string;\n\n\twithdrawal_credential: string;\n\n\tsignatures: string;\n\n\tdeposit_data_roots: string[];\n\n\tconstructor(data: {\n\t\tpubkeys: string;\n\t\twithdrawal_credential: string;\n\t\tsignatures: string;\n\t\tdeposit_data_roots: string[];\n\t}) {\n\t\tthis.pubkeys = data.pubkeys;\n\t\tthis.withdrawal_credential = data.withdrawal_credential;\n\t\tthis.signatures = data.signatures;\n\t\tthis.deposit_data_roots = data.deposit_data_roots;\n\t}\n}\n","import type { SecretKey } from '@chainsafe/blst';\n\nimport { DeriveValidator } from '../DeriveValidator';\nimport type { IDepositDataSignature, NetworkName } from '../interfaces';\nimport { SignDepositData } from '../SignDepositData';\n\nexport class ValidatorSigner {\n\treadonly pubkey: Uint8Array;\n\n\treadonly network: NetworkName;\n\n\tprivate readonly secretKey: SecretKey;\n\n\tprivate readonly validatorIndex: number;\n\n\tconstructor(\n\t\tmasterSecretKey: Uint8Array,\n\t\tvalidatorIndex: number,\n\t\tnetwork: NetworkName = 'mainnet',\n\t) {\n\t\tconst { secretKey, pubkey } = DeriveValidator(masterSecretKey, validatorIndex);\n\t\tthis.pubkey = pubkey;\n\t\tthis.secretKey = secretKey;\n\t\tthis.validatorIndex = validatorIndex;\n\t\tthis.network = network;\n\t}\n\n\tget ValidatorIndex(): number {\n\t\treturn this.validatorIndex;\n\t}\n\n\tasync SignDepositData(withdrawal_credential: Uint8Array): Promise<IDepositDataSignature> {\n\t\treturn SignDepositData(this.pubkey, withdrawal_credential, this.secretKey, this.network);\n\t}\n}\n","import { deriveKeyFromMnemonic } from '@chainsafe/bls-keygen';\nimport { toHexString } from '@chainsafe/ssz';\n\nimport { DeriveValidator } from './DeriveValidator';\nimport type { IDepositData, IPackedDepositData, NetworkName } from './interfaces';\nimport { SignDepositData } from './SignDepositData';\nimport { appendUint8Arrays, parseAddressToBLS } from './utils';\n\n/**\n * Generates a packed deposit data for a given set of validator indexes, a given seed phrase, and a given execution layer address.\n * @param {string} validatorMnemonic Seed phrase of the validator.\n * @param {string} depositor Execution layer address of the depositor.\n * @param {number[]} validatorIndexes Array of numbers representing the validator indexes to generate deposit data for.\n * @returns {PackedDepositData} An object containing the deposit data for the given validator indexes, ready for use in the BatchDeposit contract.\n * @notice We return DepositData as an object with string properties, rather than a Uint8Array, for ease of use in back-front communication.\n */\nexport async function generatePackedDepositData(\n\tvalidatorMnemonic: string,\n\tdepositor: string,\n\tvalidatorIndexes: number[],\n): Promise<IPackedDepositData> {\n\tconst withdrawalCredential = parseAddressToBLS(depositor);\n\tconst masterSecretKey: Uint8Array = deriveKeyFromMnemonic(validatorMnemonic);\n\n\tlet packedPubkeys = new Uint8Array();\n\tlet packedSignatures = new Uint8Array();\n\tconst depositDataRoots: string[] = [];\n\n\tfor (const validatorIndex of validatorIndexes) {\n\t\tconst { pubkey, secretKey } = DeriveValidator(masterSecretKey, validatorIndex);\n\n\t\t/* eslint-disable no-await-in-loop */\n\t\tconst { signature, deposit_data_root: depositDataRoot } = await SignDepositData(\n\t\t\tpubkey,\n\t\t\twithdrawalCredential,\n\t\t\tsecretKey,\n\t\t);\n\n\t\tpackedPubkeys = appendUint8Arrays(packedPubkeys, pubkey);\n\t\tpackedSignatures = appendUint8Arrays(packedSignatures, signature);\n\t\tdepositDataRoots.push(toHexString(depositDataRoot));\n\t}\n\n\treturn {\n\t\tpubkeys: toHexString(packedPubkeys),\n\t\twithdrawal_credential: toHexString(withdrawalCredential),\n\t\tsignatures: toHexString(packedSignatures),\n\t\tdeposit_data_roots: depositDataRoots,\n\t} as IPackedDepositData;\n}\n\n/**\n * Generates deposit data for a given set of validator indexes, a given seed phrase, and a given execution layer address.\n * @param {string} validatorMnemonic Seed phrase of the validator.\n * @param {string} depositor Execution layer address of the depositor.\n * @param {number[]} validatorIndexes Array of numbers representing the validator indexes to generate deposit data for.\n * @param {NetworkNames} network Name of the network to generate deposit data for.\n * @returns {DepositData[]} An array of depositData objects, similar to what deposit_cli outputs.\n */\nexport async function generateDepositData(\n\tvalidatorMnemonic: string,\n\tdepositor: string,\n\tvalidatorIndexes: number[],\n\tnetwork: NetworkName = 'mainnet',\n): Promise<IDepositData[]> {\n\tconst withdrawalCredential = parseAddressToBLS(depositor);\n\tconst masterSecretKey = deriveKeyFromMnemonic(validatorMnemonic);\n\n\tconst depositDataPromises = validatorIndexes.map(async (validatorIndex) => {\n\t\tconst { pubkey, secretKey } = DeriveValidator(masterSecretKey, validatorIndex);\n\n\t\tconst {\n\t\t\tsignature,\n\t\t\tdeposit_data_root: depositDataRoot,\n\t\t\tdeposit_message_root: depositMessageRoot,\n\t\t\tfork_version: forkVersion,\n\t\t} = await SignDepositData(pubkey, withdrawalCredential, secretKey);\n\n\t\treturn {\n\t\t\tpubkey: toHexString(pubkey).slice(2),\n\t\t\twithdrawal_credentials: toHexString(withdrawalCredential).slice(2),\n\t\t\tamount: 32e9,\n\t\t\tsignature: toHexString(signature).slice(2),\n\t\t\tdeposit_message_root: toHexString(depositMessageRoot).slice(2),\n\t\t\tdeposit_data_root: toHexString(depositDataRoot).slice(2),\n\t\t\tfork_version: toHexString(forkVersion).slice(2),\n\t\t\tnetwork_name: network,\n\t\t} as IDepositData;\n\t});\n\n\treturn Promise.all(depositDataPromises);\n}\n","import { Keystore } from '@chainsafe/bls-keystore';\n\nimport { DeriveValidator } from './DeriveValidator';\nimport type { IKeystoreObject } from './interfaces';\n\n/**\n * Generates keystores for a range of validator indexes, given a master secret key and a password.\n * @param {Uint8Array} masterSecretKey The master secret key to derive the validator secret keys from.\n * @param {number} startIndex The index of the first validator to generate a keystore for.\n * @param {number} numberOfValidators The number of validators to generate keystores for. (starting from startIndex)\n * @param {string} password The password to encrypt the keystores with.\n * @returns {IKeystoreObject[]} An array of keystores for the given validator indexes.\n */\nexport async function GenerateKeystores(\n\tmasterSecretKey: Uint8Array,\n\tstartIndex: number,\n\tnumberOfValidators: number,\n\tpassword: string,\n): Promise<IKeystoreObject[]> {\n\tconst validatorIndexes = Array.from(\n\t\t{ length: numberOfValidators },\n\t\t(_, index) => startIndex + index,\n\t);\n\n\tconst keystorePromises = validatorIndexes.map(async (validatorIndex) => {\n\t\tconst { secretKey, pubkey } = DeriveValidator(masterSecretKey, validatorIndex);\n\n\t\treturn (await Keystore.create(\n\t\t\tpassword,\n\t\t\tsecretKey.toBytes(),\n\t\t\tpubkey,\n\t\t\t`m/12381/3600/${validatorIndex}/0/0`,\n\t\t)) as IKeystoreObject;\n\t});\n\n\treturn Promise.all(keystorePromises);\n}\n"],"names":["DeriveValidator","masterSecretKey","validatorIndex","secretKey","SecretKey","fromBytes","deriveEth2ValidatorKeys","signing","pubkey","toPublicKey","toBytes","CHAIN_CONFIGS","mainnet","GENESIS_FORK_VERSION","b","GENESIS_VALIDATORS_ROOT","goerli","getDepositMessage","withdrawal_credential","withdrawalCredentials","amount","appendUint8Arrays","array1","array2","tmp","Uint8Array","length","set","parseAddressToBLS","address","replace","importDynamic","Function","SignDepositData","_x","_x2","_x3","_x4","_SignDepositData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","network","_context","next","config","sent","DOMAIN_DEPOSIT","ZERO_HASH","_yield$importDynamic3","computeDomain","computeSigningRoot","ssz","depositMessage","depositMessageRoot","phase0","DepositMessage","hashTreeRoot","domain","signingRoot","depositData","_extends","signature","sign","depositDataRoot","DepositData","abrupt","deposit_data_root","deposit_message_root","fork_version","stop","data","this","withdrawal_credentials","network_name","pubkeys","signatures","deposit_data_roots","ValidatorSigner","_DeriveValidator","prototype","_SignDepositData2","wrap","prev","key","get","_generatePackedDepositData","validatorMnemonic","depositor","validatorIndexes","withdrawalCredential","packedPubkeys","packedSignatures","depositDataRoots","_iterator","_step","_yield$SignDepositDat","deriveKeyFromMnemonic","_createForOfIteratorHelperLoose","done","value","push","toHexString","_generateDepositData","_callee3","depositDataPromises","map","_ref","_callee2","_DeriveValidator2","_yield$SignDepositDat2","forkVersion","_context2","slice","_x8","_context3","Promise","all","_GenerateKeystores","startIndex","numberOfValidators","password","keystorePromises","Array","from","_","index","Keystore","create","_x5","_x6","_x7"],"mappings":"w/PAWgBA,EAAgBC,EAA6BC,GAC5D,IAAMC,EAAYC,YAAUC,UAC3BC,0BAAwBL,EAAiBC,GAAgBK,SAI1D,MAAO,CAAEC,OAFML,EAAUM,cAAcC,UAEtBP,UAAAA,OCfLQ,EAAgB,CAC5BC,QAAS,CACRC,qBAAsBC,gBAAE,YACxBC,wBAAyBD,gBAAE,qEAE5BE,OAAQ,CACPH,qBAAsBC,gBAAE,YACxBC,wBAAyBD,gBAAE,yGCThBG,EAAoB,SAACT,EAAoBU,GAAiC,MAAM,CAC5FV,OAAAA,EACAW,sBAAuBD,EACvBE,OAAQ,8CCKIC,EAAoB,SAACC,EAAoBC,GACrD,IAAMC,EAAM,IAAIC,WAAWH,EAAOI,OAASH,EAAOG,QAIlD,OAHAF,EAAIG,IAAIL,EAAQ,GAChBE,EAAIG,IAAIJ,EAAQD,EAAOI,QAEhBF,GAQKI,EAAoB,SAACC,GAAe,OAChDf,6CAA+Be,EAAQC,QAAQ,KAAM,MAGzCC,EAAgB,IAAIC,SAAS,aAAc,kHCXxD,SAAsBC,EAAeC,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,EAAAC,WAAAC,WAwCpC,SAAAF,IAAA,OAAAA,EAAAG,EAAAC,IAAAC,MAxCM,SAAAC,EACNpC,EACAU,EACAf,EACA0C,kGAAgC,gBAAhCA,IAAAA,EAAuB,WAASC,EAAAC,OAEPhB,EAAc,4BAA2B,OAApD,OAANiB,EAA0DF,EAAAG,KAA1DD,OAAMF,EAAAC,OACmBhB,EAAc,oBAAmB,OAA5C,OAAdmB,EAA0DJ,EAAAG,KAA1DC,eAAcJ,EAAAC,QACyChB,EAC9D,8BACA,QAFmD,OAA5CoB,GAEPC,EAAAN,EAAAG,MAFOE,UAAWE,EAAaD,EAAbC,cAAeC,EAAkBF,EAAlBE,mBAAkBR,EAAAC,QAG9BhB,EAAc,mBAAkB,QAqBkB,OArBhEwB,EAA8CT,EAAAG,KAA9CM,IAEFC,EAAiBvC,EAAkBT,EAAQU,GAC3CuC,EAAqBF,EAAIG,OAAOC,eAAeC,aAAaJ,GAE5DK,EAASR,EACdH,EACAvC,EAAckC,GAAShC,qBACvBsC,GAGKW,EAA0BR,EAC/BC,EAAIG,OAAOC,eACXH,EACAK,GAGKE,EAAWC,KACbR,GACHS,UAAW9D,EAAU+D,KAAKJ,GAAapD,YAElCyD,EAAkBZ,EAAIG,OAAOU,YAAYR,aAAaG,GAAYjB,EAAAuB,gBAEjE,CACNJ,UAAWF,EAAYE,UACvBK,kBAAmBH,EACnBI,qBAAsBd,EACtBe,aAAcxB,EAAOnC,uBACI,QAAA,UAAA,OAAAiC,EAAA2B,UAAA7B,QAC1BL,WAAAC,6CCnCA,SAAYkC,GAUXC,KAAKnE,OAASkE,EAAKlE,OACnBmE,KAAKC,uBAAyBF,EAAKE,uBACnCD,KAAKvD,OAASsD,EAAKtD,OACnBuD,KAAKV,UAAYS,EAAKT,UACtBU,KAAKJ,qBAAuBG,EAAKH,qBACjCI,KAAKL,kBAAoBI,EAAKJ,kBAC9BK,KAAKH,aAAeE,EAAKF,aACzBG,KAAKE,aAAeH,EAAKG,gCAa1B,SAAYH,GAMXC,KAAKG,QAAUJ,EAAKI,QACpBH,KAAKzD,sBAAwBwD,EAAKxD,sBAClCyD,KAAKI,WAAaL,EAAKK,WACvBJ,KAAKK,mBAAqBN,EAAKM,+CC3ChC,SAAAC,EACChF,EACAC,EACA2C,YAAAA,IAAAA,EAAuB,WAEvB,IAAAqC,EAA8BlF,EAAgBC,EAAiBC,GAAvDC,EAAS+E,EAAT/E,UACRwE,KAAKnE,OADoB0E,EAAN1E,OAEnBmE,KAAKxE,UAAYA,EACjBwE,KAAKzE,eAAiBA,EACtByE,KAAK9B,QAAUA,EACf,QAIA,OAJAoC,EAAAE,UAMKlD,2BAAe,IAAAmD,EAAA3C,EAAAC,IAAAC,MAArB,SAAAC,EAAsB1B,GAAiC,OAAAwB,IAAA2C,eAAAvC,GAAA,cAAAA,EAAAwC,KAAAxC,EAAAC,MAAA,OAAA,OAAAD,EAAAuB,gBAC/CpC,EAAgB0C,KAAKnE,OAAQU,EAAuByD,KAAKxE,UAAWwE,KAAK9B,UAAQ,OAAA,UAAA,OAAAC,EAAA2B,UAAA7B,YACxF,OAAA,SAAAV,GAAA,OAAAkD,EAAA7C,WAAAC,iBAAAyC,OAAAM,qBAAAC,IAND,WACC,OAAOb,KAAKzE,ihBACZ+E,MCsBF,SAAAQ,IAFC,OAEDA,EAAAhD,EAAAC,IAAAC,MAnCO,SAAAC,EACN8C,EACAC,EACAC,GAA0B,IAAAC,EAAA5F,EAAA6F,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhB,EAAA1E,EAAAL,EAAAgG,EAAAlC,EAAAE,EAAA,OAAAzB,IAAA2C,eAAAvC,GAAA,cAAAA,EAAAwC,KAAAxC,EAAAC,MAAA,OAEpB8C,EAAuBjE,EAAkB+D,GACzC1F,EAA8BmG,wBAAsBV,GAEtDI,EAAgB,IAAIrE,WACpBsE,EAAmB,IAAItE,WACrBuE,EAA6B,GAAEC,EAAAI,EAERT,GAAgB,OAAA,IAAAM,EAAAD,KAAAK,MAAAxD,EAAAC,QAAA,MAG5C,OAHwBmC,EACMlF,EAAgBC,EADtBiG,EAAAK,OAChB/F,EAAM0E,EAAN1E,OAAQL,EAAS+E,EAAT/E,UAEhB2C,EAAAC,QACgEd,EAC/DzB,EACAqF,EACA1F,GACA,QAJO8D,GAIPkC,EAAArD,EAAAG,MAJOgB,UAA8BE,EAAegC,EAAlC7B,kBAMnBwB,EAAgBzE,EAAkByE,EAAetF,GACjDuF,EAAmB1E,EAAkB0E,EAAkB9B,GACvD+B,EAAiBQ,KAAKC,cAAYtC,IAAkB,QAAArB,EAAAC,OAAA,MAAA,QAAA,OAAAD,EAAAuB,gBAG9C,CACNS,QAAS2B,cAAYX,GACrB5E,sBAAuBuF,cAAYZ,GACnCd,WAAY0B,cAAYV,GACxBf,mBAAoBgB,IACE,QAAA,UAAA,OAAAlD,EAAA2B,UAAA7B,QACvBL,WAAAC,WA0CA,SAAAkE,IAAA,OAAAA,EAAAjE,EAAAC,IAAAC,MAhCM,SAAAgE,EACNjB,EACAC,EACAC,EACA/C,8EAyBE,gBAzBFA,IAAAA,EAAuB,WAEjBgD,EAAuBjE,EAAkB+D,GACzC1F,EAAkBmG,wBAAsBV,GAExCkB,EAAsBhB,EAAiBiB,eAAG,IAAAC,EAAArE,EAAAC,IAAAC,MAAC,SAAAoE,EAAO7G,GAAc,IAAA8G,EAAAxG,EAAAL,EAAA8G,EAAAhD,EAAAE,EAAAV,EAAAyD,EAAA,OAAAxE,IAAA2C,eAAA8B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAApE,MAAA,OAC5C,OAD4CiE,EACvChH,EAAgBC,EAAiBC,GAAvDM,EAAMwG,EAANxG,OAAQL,EAAS6G,EAAT7G,UAASgH,EAAApE,OAOfd,EAAgBzB,EAAQqF,EAAsB1F,GAAU,OADrD,OAHZ8D,GAIiEgD,EAAAE,EAAAlE,MAJjEgB,UACmBE,EAAe8C,EAAlC3C,kBACsBb,EAAkBwD,EAAxC1C,qBACc2C,EAAWD,EAAzBzC,aAAY2C,EAAA9C,gBAGN,CACN7D,OAAQiG,cAAYjG,GAAQ4G,MAAM,GAClCxC,uBAAwB6B,cAAYZ,GAAsBuB,MAAM,GAChEhG,OAAQ,KACR6C,UAAWwC,cAAYxC,GAAWmD,MAAM,GACxC7C,qBAAsBkC,cAAYhD,GAAoB2D,MAAM,GAC5D9C,kBAAmBmC,cAAYtC,GAAiBiD,MAAM,GACtD5C,aAAciC,cAAYS,GAAaE,MAAM,GAC7CvC,aAAchC,IACE,OAAA,UAAA,OAAAsE,EAAA1C,UAAAsC,OACjB,gBAAAM,GAAA,OAAAP,EAAAvE,WAAAC,gBAAC8E,EAAAjD,gBAEKkD,QAAQC,IAAIZ,IAAoB,OAAA,UAAA,OAAAU,EAAA7C,UAAAkC,QACvCpE,WAAAC,WCvDA,SAAAiF,IAAA,OAAAA,EAAAhF,EAAAC,IAAAC,MAvBM,SAAAoE,EACN9G,EACAyH,EACAC,EACAC,GAAgB,IAAAhC,EAAAiC,EAAA,OAAAnF,IAAA2C,eAAA8B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAApE,MAAA,OAgBd,OAdI6C,EAAmBkC,MAAMC,KAC9B,CAAErG,OAAQiG,IACV,SAACK,EAAGC,GAAK,OAAKP,EAAaO,KAGtBJ,EAAmBjC,EAAiBiB,eAAG,IAAAC,EAAArE,EAAAC,IAAAC,MAAC,SAAAC,EAAO1C,GAAc,IAAAgF,EAAA/E,EAAAK,EAAA,OAAAkC,IAAA2C,eAAAvC,GAAA,cAAAA,EAAAwC,KAAAxC,EAAAC,MAAA,OACzC,OADyCmC,EACpClF,EAAgBC,EAAiBC,GAAvDC,EAAS+E,EAAT/E,UAAWK,EAAM0E,EAAN1E,OAAMsC,EAAAC,OAEXmF,WAASC,OACtBP,EACAzH,EAAUO,UACVF,kBACgBN,UAChB,OAAA,OAAA4C,EAAAuB,gBAAAvB,EAAAG,MAAA,OAAA,UAAA,OAAAH,EAAA2B,UAAA7B,OACD,gBAAAwF,GAAA,OAAAtB,EAAAvE,WAAAC,gBAAC2E,EAAA9C,gBAEKkD,QAAQC,IAAIK,IAAiB,OAAA,UAAA,OAAAV,EAAA1C,UAAAsC,QACpCxE,WAAAC,+DAvBD,SAAuCN,EAAAC,EAAAC,EAAAC,GAAA,OAAAoF,EAAAlF,WAAAC,wGD8CvC,SAAyCH,EAAA+F,EAAAC,EAAAC,GAAA,OAAA5B,EAAAnE,WAAAC,8CA3CzC,SAA+CN,EAAAC,EAAAC,GAAA,OAAAqD,EAAAlD,WAAAC"}